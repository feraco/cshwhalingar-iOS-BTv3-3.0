/*
 *	Copyright 2014, ATRAIN53
 *	All rights reserved.
 *
 *	Redistribution and use in source and binary forms, with or without modification, are 
 *	permitted provided that the following conditions are met:
 *
 *	Redistributions of source code must retain the above copyright notice which includes the
 *	name(s) of the copyright holders. It must also retain this list of conditions and the 
 *	following disclaimer. 
 *
 *	Redistributions in binary form must reproduce the above copyright notice, this list 
 *	of conditions and the following disclaimer in the documentation and/or other materials 
 *	provided with the distribution. 
 *
 *	Neither the name of David Book, or buzztouch.com nor the names of its contributors 
 *	may be used to endorse or promote products derived from this software without specific 
 *	prior written permission.
 *
 *	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
 *	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 *	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
 *	IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
 *	INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
 *	NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
 *	PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 *	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 *	ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
 *	OF SUCH DAMAGE. 
 */

// must add EventKit and EventKitUI framework to project
// ver 1.0 (4/2/14) - skompdev@skomp.net


#import <UIKit/UIKit.h>
#import <Foundation/Foundation.h>
#import "JSON.h"
#import "BT_application.h"
#import "BT_strings.h"
#import "BT_viewUtilities.h"
#import "BT_appDelegate.h"
#import "BT_item.h"
#import "BT_debugger.h"
#import "BT_viewController.h"
#import "AT_eventadd.h"


@implementation AT_eventadd

@synthesize defaultCalendar, eventsList, eventStore, currentTitle;
@synthesize posterHeight, posterWidth;
@synthesize buttonX,buttonY,buttonHeight,buttonWidth;

-(void)viewDidLoad{
	[BT_debugger showIt:self theMessage:@"viewDidLoad"];
	[super viewDidLoad];
   
    self.eventStore = [[EKEventStore alloc] init];
    // Get the default calendar from store.
    self.defaultCalendar = [self.eventStore defaultCalendarForNewEvents];
    
    NSString *eventBackgroundImage = [BT_strings getJsonPropertyValue:self.screenData.jsonVars nameOfProperty:@"ATEventImage" defaultValue:@""];
    NSString *eventBackgroundImageURL = [BT_strings getJsonPropertyValue:self.screenData.jsonVars nameOfProperty:@"ATEventImageURL" defaultValue:@""];
    UIImage *img;
    if ([eventBackgroundImage length] > 3) {
        //local image specified
        NSLog(@"local image specified");
        img = [UIImage imageNamed:eventBackgroundImage];
    }
    else {
        //no local image specified, check for url
        NSLog(@"no local image - checking for url");
        if ([eventBackgroundImageURL length] > 3) {
            //url image specified
            NSLog(@"URL specified - looking at cache");
            NSString *backgroundNameFromURL = [BT_strings getFileNameFromURL:eventBackgroundImageURL];
            NSString *documentsPath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];
            NSString *imageNameInDocuments = [documentsPath stringByAppendingPathComponent:[NSString stringWithFormat:@"%@",backgroundNameFromURL]];
            //check if image has been downloaded previously
            BOOL fileExists = [[NSFileManager defaultManager] fileExistsAtPath:imageNameInDocuments];
            if (fileExists) {
                NSLog(@"image at url already has been downloaded - using cached version");
                img = [UIImage imageWithContentsOfFile:imageNameInDocuments];
            }
            else {
                NSLog(@"image not in cache - downloading...");
                NSData *imageData = [[NSData alloc] initWithContentsOfURL:[NSURL URLWithString:eventBackgroundImageURL]];
                img =  [[UIImage alloc] initWithData:imageData];
                NSLog(@"attempting to save image to cache...");
                NSError* error;
                BOOL checkSave = [imageData writeToFile:imageNameInDocuments options:NSDataWritingAtomic error:&error];
                if (checkSave == YES) NSLog(@"File should be saved as %@.  Checking now...", imageNameInDocuments);
                else NSLog(@"error is:%@",error.description);
                //check to see if file was successfully saved:
                
                BOOL fileExists = [[NSFileManager defaultManager] fileExistsAtPath:imageNameInDocuments];
                if (fileExists == YES) NSLog(@"Image successfully saved at: %@", imageNameInDocuments);
            }
            
        }
        else {
            //no event poster image specified
        }
    }
    

    //event poster image code

    //checking appdelegate for device type first....
    BT_appDelegate *appDelegate = (BT_appDelegate *) [[UIApplication sharedApplication] delegate];

    if([appDelegate.rootDevice isIPad]){
    
        //set poster for ipad sizing
        posterWidth= [[BT_strings getJsonPropertyValue:self.screenData.jsonVars nameOfProperty:@"ATEventPosterWidthiPad" defaultValue:@"768"]intValue];
        
        posterHeight= [[BT_strings getJsonPropertyValue:self.screenData.jsonVars nameOfProperty:@"ATEventPosterHeightiPad" defaultValue:@"800"]intValue];
        
        
    }else {
    
    
    //set poster for iphone
    posterWidth= [[BT_strings getJsonPropertyValue:self.screenData.jsonVars nameOfProperty:@"ATEventPosterWidthiPhone" defaultValue:@"320"]intValue];
    
    posterHeight= [[BT_strings getJsonPropertyValue:self.screenData.jsonVars nameOfProperty:@"ATEventPosterHeightiPhone" defaultValue:@"300"]intValue];
    
    }
    
	
    UIImageView* imgView = [[UIImageView alloc] initWithFrame:CGRectMake(0,0, posterWidth, posterHeight)];
    imgView.image = img;
    [self.view addSubview:imgView];

    // create an Add Event to Calendar button 
    UIButton *button = [UIButton buttonWithType:UIButtonTypeRoundedRect];

    //check iPad or iPhone and size/position accordingly from control panel

    if([appDelegate.rootDevice isIPad]){
        
        //set button size and position for ipad layout
        
        //distance from left side of screen
        buttonX= [[BT_strings getJsonPropertyValue:self.screenData.jsonVars nameOfProperty:@"ATEventButtonXiPad" defaultValue:@"300"]intValue];
        
        //distance from top
        buttonY= [[BT_strings getJsonPropertyValue:self.screenData.jsonVars nameOfProperty:@"ATEventButtonYiPad" defaultValue:@"815"]intValue];
        
        //button width
        buttonWidth= [[BT_strings getJsonPropertyValue:self.screenData.jsonVars nameOfProperty:@"ATEventButtonWidthiPad" defaultValue:@"210"]intValue];
        
        //button height
        buttonHeight= [[BT_strings getJsonPropertyValue:self.screenData.jsonVars nameOfProperty:@"ATEventButtonHeightiPad" defaultValue:@"60"]intValue];

        
    }else {

    
        //set button size position for iphone layout
        
        //distance from left side of screen
        buttonX= [[BT_strings getJsonPropertyValue:self.screenData.jsonVars nameOfProperty:@"ATEventButtonXiPhone" defaultValue:@"100"]intValue];

        //distance from top
        buttonY= [[BT_strings getJsonPropertyValue:self.screenData.jsonVars nameOfProperty:@"ATEventButtonYiPhone" defaultValue:@"315"]intValue];

        //button width
        buttonWidth= [[BT_strings getJsonPropertyValue:self.screenData.jsonVars nameOfProperty:@"ATEventButtonWidthiPhone" defaultValue:@"210"]intValue];

       //button height
        buttonHeight= [[BT_strings getJsonPropertyValue:self.screenData.jsonVars nameOfProperty:@"ATEventButtonHeightiPhone" defaultValue:@"30"]intValue];

        }

    button.frame = CGRectMake(buttonX, buttonY, buttonWidth, buttonHeight);
    

    //set the Button text and color via Control Panel
    [button setTitle:[BT_strings getJsonPropertyValue:self.screenData.jsonVars nameOfProperty:@"ATEventButtonText" defaultValue:@"Add Event to Calendar"] forState:UIControlStateNormal];
   
    [button setTitleColor:[BT_color getColorFromHexString:[BT_strings getJsonPropertyValue:self.screenData.jsonVars nameOfProperty:@"ATEventButtonTextColor" defaultValue:@"#000000"]] forState:UIControlStateNormal];
    
    [button addTarget:self action:@selector(addEvent: ) forControlEvents:UIControlEventTouchUpInside];
    
    //add the button to the view
    [self.view addSubview:button];

    //The code below puts an "Add" button on the top navbar
    //Comment these next two lines out if you do not want this button on your navbar
    //You can use other UIBarButtonSystemItem images besides "UIBarButtonSystemItemAdd" eg:UIBarButtonSystemItemCompose
    UIBarButtonItem *addButtonItem = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemAdd target:self action:@selector(addEvent:)];
    
    self.navigationItem.rightBarButtonItem = addButtonItem;
    
}

//view will appear
-(void)viewWillAppear:(BOOL)animated{
	[super viewWillAppear:animated];
	[BT_debugger showIt:self theMessage:@"viewDidLoad"];
    
    //request access to users default calendar (thanks MrDavid!)
    EKEventStore *es = [[EKEventStore alloc] init];
    [es requestAccessToEntityType:EKEntityTypeEvent completion:^(BOOL granted, NSError *error) {
    }];
    
}


-(IBAction) addEvent:(id)sender {
    
    self.eventStore = [[EKEventStore alloc] init];
    EKEvent *event = [EKEvent eventWithEventStore:eventStore];
    
    event.title = [BT_strings getJsonPropertyValue:self.screenData.jsonVars nameOfProperty:@"ATEventTitle" defaultValue:@""];
    event.location = [BT_strings getJsonPropertyValue:self.screenData.jsonVars nameOfProperty:@"ATEventLocation" defaultValue:@""];
    
    //event start and end times - non JSON for reference
    //NSString *start = @"2014-04-26:18:30";
    //NSString *end = @"2014-04-26:22:30";
    
    
    NSString *allDay = [BT_strings getJsonPropertyValue:self.screenData.jsonVars nameOfProperty:@"ATEventAllDay" defaultValue:@"NO"];
    if ([allDay isEqualToString: @"YES"]){
        
        event.allDay = YES;
        
        //format the date string for YMD only ie:@"2014-04-26"
        NSDateFormatter *   dateFormatter = [[NSDateFormatter alloc] init];
        [dateFormatter setDateFormat:@"yyyy-MM-dd"];
        
        //event start JSON string
        NSString *start = [BT_strings getJsonPropertyValue:self.screenData.jsonVars nameOfProperty:@"ATEventStartTime" defaultValue:@""];
        
        //event end JSON string
        NSString *end = [BT_strings getJsonPropertyValue:self.screenData.jsonVars nameOfProperty:@"ATEventEndTime" defaultValue:@""];
        
        //start date
        NSDate * date = [[NSDate alloc] init];
        date = [dateFormatter dateFromString:start];
        
        //end date
        NSDate * date2 = [[NSDate alloc] init];
        date2 = [dateFormatter dateFromString:end];
        
        //event start and end date times
        event.startDate = date;
        event.endDate = date2;
        
        
        
	}
       
    else {
   
        event.allDay = NO;
       
        //format the date string to include hours ie:@"2014-04-26:18:30";
        NSDateFormatter *   dateFormatter = [[NSDateFormatter alloc] init];
        [dateFormatter setDateFormat:@"yyyy-MM-dd:HH:mm"];
        
        //non JSON strings for a reference 
        //NSString *start = @"2014-04-26:18:30";
        //NSString *end = @"2014-04-26:22:30";
        
        //event start JSON string
        NSString *start = [BT_strings getJsonPropertyValue:self.screenData.jsonVars nameOfProperty:@"ATEventStartTime" defaultValue:@""];
        
        //event end JSON string
        NSString *end = [BT_strings getJsonPropertyValue:self.screenData.jsonVars nameOfProperty:@"ATEventEndTime" defaultValue:@""];
        
        //start date
        NSDate * date = [[NSDate alloc] init];
        date = [dateFormatter dateFromString:start];
        
        //end date
        NSDate * date2 = [[NSDate alloc] init];
        date2 = [dateFormatter dateFromString:end];
        
        //event start and end date times
        event.startDate = date;
        event.endDate = date2;
        
        
    }
    
    //event.URL = [NSURL URLWithString:@"http://www.buzztouch.com"];
    event.URL = [NSURL URLWithString:[BT_strings getJsonPropertyValue:self.screenData.jsonVars nameOfProperty:@"ATEventURL" defaultValue:@"http://www.buzztouch.com"]];
        
    //event.notes = @"Hard Coded value here";
    event.notes = [BT_strings getJsonPropertyValue:self.screenData.jsonVars nameOfProperty:@"ATEventNotes" defaultValue:@""];
    
    // now pop the EKEventkit viewcontroller
    EKEventEditViewController *addController = [[EKEventEditViewController alloc] initWithNibName:nil bundle:nil];
    addController.event = event;
    addController.eventStore = self.eventStore;
    
    [self presentViewController:addController animated:YES completion:nil];
    addController.editViewDelegate = self;
    
}


// EKEventEditViewDelegate method to update event store according to user actions.
- (void)eventEditViewController:(EKEventEditViewController *)controller
          didCompleteWithAction:(EKEventEditViewAction)action {
        
    NSError *error = nil;
    EKEvent *thisEvent = controller.event;
    
    switch (action) {
        case EKEventEditViewActionCanceled:{
            
			// Edit action canceled, do nothing.
            //show Cancelled Alert and exit screen and do nothing....
			            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Cancelled"
                                                            message:@"Event has NOT been added to your Calendar"
                                                           delegate:self
                                                  cancelButtonTitle:@"OK"
                                                  otherButtonTitles:nil];
            [alert show];
        
        }
            
        break;
            
        case EKEventEditViewActionSaved:{
            // Save Event to calendar selected. Show sucess alert and exit screen
            if (self.defaultCalendar ==  thisEvent.calendar) {
                [self.eventsList addObject:thisEvent];
            }
            [controller.eventStore saveEvent:controller.event span:EKSpanThisEvent error:&error];
                        
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Saved!"
                                                            message:@"This event has been added to your Calendar"
                                                           delegate:self
                                                  cancelButtonTitle:@"OK"
                                                  otherButtonTitles:nil];
            [alert show];

        }
            
            break;
            
        case EKEventEditViewActionDeleted:
            // Not providing a delete button but leaving this code intact for future possible use....
			
			if (self.defaultCalendar ==  thisEvent.calendar) {
                [self.eventsList removeObject:thisEvent];
            }
            [controller.eventStore removeEvent:thisEvent span:EKSpanThisEvent error:&error];
            break;
            
        default:
            break;
    }
    
    // Dismiss the modal view controller
    [self dismissViewControllerAnimated:YES completion:nil];
    
}


// Set the calendar edited by EKEventEditViewController to our chosen calendar - the default calendar.
- (EKCalendar *)eventEditViewControllerDefaultCalendarForNewEvents:(EKEventEditViewController *)controller {
    EKCalendar *calendarForEdit = self.defaultCalendar;
    return calendarForEdit;
}

//dealloc
-(void)dealloc {
    
}


@end







